"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[561],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,c=m["".concat(s,".").concat(h)]||m[h]||d[h]||o;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},575:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],r={},s=void 0,p={unversionedId:"next_generation_sequencing/Building an NGS processing pipeline/pipeline",id:"next_generation_sequencing/Building an NGS processing pipeline/pipeline",title:"pipeline",description:"Implementing a NGS data processing pipeline.",source:"@site/docs/next_generation_sequencing/Building an NGS processing pipeline/pipeline.md",sourceDirName:"next_generation_sequencing/Building an NGS processing pipeline",slug:"/next_generation_sequencing/Building an NGS processing pipeline/pipeline",permalink:"/whg-training-resources/next_generation_sequencing/Building an NGS processing pipeline/pipeline",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/docs/next_generation_sequencing/Building an NGS processing pipeline/pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Required_software",permalink:"/whg-training-resources/next_generation_sequencing/Building an NGS processing pipeline/Required_software"},next:{title:"Variant calling, phasing and imputation",permalink:"/whg-training-resources/next_generation_sequencing/variant_calling_and_imputation/"}},u={},d=[{value:"Implementing a NGS data processing pipeline.",id:"implementing-a-ngs-data-processing-pipeline",level:2},{value:"Tips and tricks",id:"tips-and-tricks",level:3},{value:"But I want to run the yellow bits too!",id:"but-i-want-to-run-the-yellow-bits-too",level:4},{value:"How should I put sample information in?",id:"how-should-i-put-sample-information-in",level:4},{value:"How should I organise my pipeline files?",id:"how-should-i-organise-my-pipeline-files",level:4},{value:"My snakefiles are getting too big!",id:"my-snakefiles-are-getting-too-big",level:4},{value:"Keeping a fast iteration time during development.",id:"keeping-a-fast-iteration-time-during-development",level:4},{value:"Dealing with intermediate files",id:"dealing-with-intermediate-files",level:4},{value:"Read groups what now?",id:"read-groups-what-now",level:4},{value:"What&#39;s in the fastq header?",id:"whats-in-the-fastq-header",level:4},{value:"Octopus is taking too long!",id:"octopus-is-taking-too-long",level:4},{value:"What ploidy?",id:"what-ploidy",level:4},{value:"Tools that use temporary directories",id:"tools-that-use-temporary-directories",level:4},{value:"Tips on using <code>bwa mem</code>",id:"tips-on-using-bwa-mem",level:4},{value:"Tips on using <code>samtools</code>",id:"tips-on-using-samtools",level:4},{value:"Good luck!",id:"good-luck",level:2}],m={toc:d};function h(e){var t=e.components,r=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"implementing-a-ngs-data-processing-pipeline"},"Implementing a NGS data processing pipeline."),(0,o.kt)("p",null,"If you've followed the ",(0,o.kt)("a",{parentName:"p",href:"/whg-training-resources/next_generation_sequencing/Building%20an%20NGS%20processing%20pipeline/Introduction"},"introduction"),", you should now have a bunch of software installed,\nincluding the ",(0,o.kt)("inlineCode",{parentName:"p"},"snakemake")," pipelining software, and you will have a set of 10 fastq files named in\nthe format ",(0,o.kt)("inlineCode",{parentName:"p"},"ERR[xxxxxx]_[1|2].fastq.gz"),".  And you will also have downloaded the ",(0,o.kt)("em",{parentName:"p"},"P.falciparum")," reference sequence, ",(0,o.kt)("inlineCode",{parentName:"p"},"Pf3D7_v3.fa.gz")," - we recommend putting this in its own folder, say ",(0,o.kt)("inlineCode",{parentName:"p"},"data/reference/"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Challenge."),"  Write a snakemake pipeline that processes these reads.  Here are some points to consider."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Your pipeline should start with the set of fastq read files named by accessions as described in the ",(0,o.kt)("a",{parentName:"li",href:"/whg-training-resources/next_generation_sequencing/Building%20an%20NGS%20processing%20pipeline/Introduction"},"introduction"),".  To keep things well-organised, it's a good idea to keep these in a subdirectory, so they will look something like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"   data/reads/ERR377582_1.fastq.gz\n   data/reads/ERR377582_2.fastq.gz\n   data/reads/ERR377591_1.fastq.gz\n   data/reads/ERR377591_2.fastq.gz\n   data/reads/ERR377629_1.fastq.gz\n   data/reads/ERR377629_2.fastq.gz\n   data/reads/ERR417621_1.fastq.gz\n   data/reads/ERR417621_2.fastq.gz\n   data/reads/ERR417627_1.fastq.gz\n   data/reads/ERR417627_2.fastq.gz\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You will also need the reference sequence, placed in ",(0,o.kt)("inlineCode",{parentName:"p"},"data/reference/Pf3D7_v3.fa.gz"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The pipelines will output a set of BAM files containing these reads aligned to the a reference sequence.  The reads should be coordinate sorted, duplicate read pairs should have been marked (or removed), and the reads should be indexed.  My advice is to put results in a seperate subdirectory, so they will look something like this:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    results/aligned/QG0033-C.bam\n    results/aligned/QG0033-C.bam.bai\n    results/aligned/QG0041-C.bam\n    results/aligned/QG0041-C.bam.bai\n    results/aligned/QG0049-C.bam\n    results/aligned/QG0049-C.bam.bai\n    results/aligned/QG0056-C.bam\n    results/aligned/QG0056-C.bam.bai\n    results/aligned/QG0088-C.bam\n    results/aligned/QG0088-C.bam.bai\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The pipeline should also perform QC of the fastq files. We suggest using ",(0,o.kt)("inlineCode",{parentName:"li"},"fastqc")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"multiqc")," for this.\nSo this will output some files that look like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    results/qc/QG0033-C.fastqc.html\n    results/qc/QG0041-C.fastqc.html\n    results/qc/QG0049-C.fastqc.html\n    results/qc/QG0056-C.fastqc.html\n    results/qc/QG0088-C.fastqc.html\n    results/qc/multiqc_report.html\n")),(0,o.kt)("p",null,"You should of course look at the output to look for anything odd!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The pipeline will also output a ",(0,o.kt)("a",{parentName:"li",href:"http://genome.ucsc.edu/goldenPath/help/bedgraph.html"},(0,o.kt)("inlineCode",{parentName:"a"},"bedgraph"))," file for each sample, reporting the coverage at each site in the genome.  (",(0,o.kt)("inlineCode",{parentName:"li"},"bedtools genomecov -bg")," is a good way to create this).  These will look like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    results/coverage/QG0033-C.coverage.bedgraph\n    results/coverage/QG0041-C.coverage.bedgraph\n    results/coverage/QG0049-C.coverage.bedgraph\n    results/coverage/QG0056-C.coverage.bedgraph\n    results/coverage/QG0088-C.coverage.bedgraph\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"And, if you implement the whole pipeline, it will also output a variant calls file (for this tutorial we suggest using the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/luntergroup/octopus"},(0,o.kt)("inlineCode",{parentName:"a"},"octopus")," variant caller")," for this).  These will be an indexed bgzipped ",(0,o.kt)("a",{parentName:"li",href:"https://samtools.github.io/hts-specs/VCFv4.2.pdf"},"vcf file"),", which should look like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    results/variant_calls/variant_calls.vcf.gz\n    results/variant_calls/variant_calls.vcf.gz.tbi\n")),(0,o.kt)("p",null,"Here is a diagram of the overall pipeline:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram of pipeline",src:n(1036).Z,width:"1722",height:"1971"})),(0,o.kt)("p",null,"You have to implement the green bits... good luck!"),(0,o.kt)("p",null,"If you are running this as part of a ",(0,o.kt)("a",{parentName:"p",href:"www.well.ox.ac.uk"},"WHG course"),", we'll discuss your pipeline and look at the outputs at the wrap-up session later in the week."),(0,o.kt)("h3",{id:"tips-and-tricks"},"Tips and tricks"),(0,o.kt)("p",null,"Here is some guidance to help you write your pipeline.  Click the links to jump to the relevant section."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#But-I-want-to-run-the-yellow-bits-too"},"But I want to run the yellow bits too!")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#How-should-I-put-sample-information-in"},"How should I put sample information in?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#How-should-I-organise-my-pipeline-files"},"How should I organise my pipeline files?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#My-snakefiles-are-getting-too-big"},"My snakefiles are getting too big!")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Keeping-a-fast-iteration-time-during-development"},"Keeping a fast iteration time during development"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Dealing-with-intermediate-files"},"Dealing with intermediate files"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Read-groups-what-now"},"Read groups what now?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Whats-in-the-fastq-header"},"What's in the fastq header?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#octopus-is-taking-too-long"},"Octopus is taking too long!")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#what-ploidy"},"What ploidy?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tools-that-use-temporary-directories"},"Tools that use temporary directories")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tips-on-using-bwa-mem"},"Tips on using ",(0,o.kt)("inlineCode",{parentName:"a"},"bwa mem")),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tips-on-using-samtools"},"Tips on using ",(0,o.kt)("inlineCode",{parentName:"a"},"samtools")),".")),(0,o.kt)("h4",{id:"but-i-want-to-run-the-yellow-bits-too"},"But I want to run the yellow bits too!"),(0,o.kt)("p",null,"Be my guest! Running variant annotation in particular would be a good thing to do, as would looking at post-alignment QC metrics."),(0,o.kt)("h4",{id:"how-should-i-put-sample-information-in"},"How should I put sample information in?"),(0,o.kt)("p",null,"I always put the information about the samples / the needed data in through a ",(0,o.kt)("strong",{parentName:"p"},"config file"),". This\nis a file called (say) ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," that you pass in using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--configfile")," argument.  For example, for this project the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," might look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "reference": "data/reference/Pf3D7_v3.fa.gz",\n    "fastq_filename_template": "data/reads/subsampled/{ID}_{read}.fastq.gz",\n    "samples": [\n        { "name": "QG0033-C", "ID": "ERR377582" },\n        { "name": "QG0041-C", "ID": "ERR377591" },\n        { "name": "QG0049-C", "ID": "ERR417627" },\n        { "name": "QG0056-C", "ID": "ERR417621" },\n        { "name": "QG0088-C", "ID": "ERR377629" }\n    ]\n}\n')),(0,o.kt)("p",null,"And I would run snakemake like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"snakemake -s pipelines/master.snakefile --configfile config.json\n")),(0,o.kt)("p",null,"The point of this is that it makes it easy to run the pipeline on different sets of data - you just swap out the config file for a different one."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"how-should-i-organise-my-pipeline-files"},"How should I organise my pipeline files?"),(0,o.kt)("p",null,"I stick to a specific hierarchy: data goes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"data/")," folder, analysis results go in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"results")," folder, and snakemake files and other scripts go in a dedicated ",(0,o.kt)("inlineCode",{parentName:"p"},"pipelines")," folder.  So it might look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"toplevel/\n  config.json\n  pipelines/\n    master.snakemake\n  data/\n    reads/\n      ERR377582_1.fastq.gz\n      ERR377582_2.fastq.gz\n      ...\n  results/\n    qc/\n    aligned/\n    ...\n")),(0,o.kt)("p",null,"I then always run the pipeline from the top-level folder. All the paths used in the pipeline are\neither ",(0,o.kt)("em",{parentName:"p"},"relative to the top-level folder"),", or are specified in the config file."),(0,o.kt)("p",null,"The point of this arrangement is that the ",(0,o.kt)("inlineCode",{parentName:"p"},"pipelines")," folder contains all of the code for the pipeline, but none of the data. This means it is easy to copy around, or to put it up on github, and so on."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note.")," The snakemake documentation suggests a ",(0,o.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html"},"similar, but slightly different layout"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"my-snakefiles-are-getting-too-big"},"My snakefiles are getting too big!"),(0,o.kt)("p",null,"To fix this, I often use the snakemake ",(0,o.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/modularization.html"},(0,o.kt)("inlineCode",{parentName:"a"},"include"),"\nfeature")," to split up the\nfile into components of related rules. For example, in our pipeline there are a bunch of rules for\nread qc, some for alignment and post-processing, a bunch for variant calling, and a bunch for\ncomputing coverage and so on. So I might have: ",(0,o.kt)("inlineCode",{parentName:"p"},"pipelines/ master.snakmake functions.snakemake\nqc.snakemake alignment.snakemake variants.snakemake coverage.snakemake")),(0,o.kt)("p",null,"My ",(0,o.kt)("inlineCode",{parentName:"p"},"master.snakemake")," then looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'include: "functions.snakemake"\ninclude: "qc.snakemake"\ninclude: "alignment.snakemake"\ninclude: "variants.snakemake"\ninclude: "coverage.snakemake"\n')),(0,o.kt)("p",null,"I like this because it keeps related things together, but the files become manageable in size."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note.")," You'll notice I included a ",(0,o.kt)("inlineCode",{parentName:"p"},"functions.snakemake")," above.  This is because you often need a few python functions to help with your pipeline - for example, mapping from sample names to fastq filenames and so on.  They tend to be re-used so it can be nice to group these into one file."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"keeping-a-fast-iteration-time-during-development"},"Keeping a fast iteration time during development."),(0,o.kt)("p",null,"When you're developing a pipeline, you don't want to wait two hours only to discover that it didn't\nwork. A good idea would therefore be to develop your practical using smaller, sub-sampled version\nof the datasets (whichever of the above raw data you use). For example, you could run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ gunzip -c filename.fastq.gz | head -n 4000 | gzip -c > filename.subsampled.fastq\n")),(0,o.kt)("p",null,"to take the first few reads from each file."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Question.")," The above command specifies a multiple of 4 lines.  Why?  How many reads does the above command extract?"),(0,o.kt)("p",null,"If you set your pipeline up the way I suggest above then you can have a config file for the small\ntest dataset, and then once it is all working, rerun using the real config file specifying the full\ndataset."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"dealing-with-intermediate-files"},"Dealing with intermediate files"),(0,o.kt)("p",null,"The alignment steps in ",(0,o.kt)("a",{target:"_blank",href:n(5671).Z},"our pipeline")," in particular are notorious for generating intermediate files.  Indeed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the alignment step outputs a SAM file..."),(0,o.kt)("li",{parentName:"ul"},"which is converted to a BAM file..."),(0,o.kt)("li",{parentName:"ul"},"which you then have to sort by position..."),(0,o.kt)("li",{parentName:"ul"},"in which you then have to mark the duplicates..."),(0,o.kt)("li",{parentName:"ul"},"which are then indexed.")),(0,o.kt)("p",null,"That's at least 3 intermediate files along the way.  We don't want to keep these, they were just needed during the pipeline."),(0,o.kt)("p",null,"I use a few ways to deal with this.  One way is just to use unix pipes to pipe command together within rules - as in"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bwa mem reference.fa read1.fq read2.fq | samtools view -b -o aligned.bam\n")),(0,o.kt)("p",null,"However, I find that too much of this makes the pipeline hard to debug (which command failed?  you can't tell.)"),(0,o.kt)("p",null,"Instead, I typically go for temp files and use the snakemake ",(0,o.kt)("inlineCode",{parentName:"p"},"temp()")," function to tell snakemake files are temporary.  So I might write the alignment rule as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'rule align_reads:\n  input:\n    fq1 = something,\n    fq2 = something\n  output:\n    sam = temp( "results/alignment/{sample_name}.sam" )\n  shell: "bwa mem ..."\n')),(0,o.kt)("p",null,"As you can see, I tend to also put temporary files into their own ",(0,o.kt)("inlineCode",{parentName:"p"},"tmp/")," folder as well - this avoids cluttering up the results folder when jobs fail."),(0,o.kt)("p",null,"Second, rules can refer to other rule outputs, so the next step in the pipeline can be written:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'rule fix_matepair_information_and_convert_to_bam:\n  input:\n    sam = rules.align_reads.output.sam\n  output:\n    bam = temp( "results/alignment/tmp/{sample_name}.bam" )\n  shell: "samtools fixmate -m {input.sam} {output.bam}"\n')),(0,o.kt)("p",null,"and so on down the pipeline."),(0,o.kt)("p",null,"Third - ",(0,o.kt)("inlineCode",{parentName:"p"},"snakemake")," actually has a ",(0,o.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#piped-output"},"named pipe\noutput")," feature, so\nyou can get the benefit of the UNIX pipe with the same syntax as above - just replace ",(0,o.kt)("inlineCode",{parentName:"p"},"temp()")," with\n",(0,o.kt)("inlineCode",{parentName:"p"},"pipe()")," and it should automatically work. (I've never actually used this feature but it's a nice\nidea for this step, because the SAM file output by ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," might be huge when applied to real data.)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"read-groups-what-now"},"Read groups what now?"),(0,o.kt)("p",null,"Some programs require reads to have 'read groups'. What are they and how do you get them in there?"),(0,o.kt)("p",null,"BAM files can easily be post-processed and merged.  Read groups are a way to put information in that records the original sample and the sequencing run, so that downstream programs can distinguish these.  The read groups are encoded in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@RG")," header field of the BAM file (which you can see using ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools view -h"),"), and in the ",(0,o.kt)("inlineCode",{parentName:"p"},"RG")," tag for each alignment.  A good document on read groups is ",(0,o.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"this one on the GATK website"),"."),(0,o.kt)("p",null,"In our pipeline these don't seem that important (we have one alignment file per input fastq file\npair), but in other pipelines the same sample might have been sequenced many times and the results\nmerged. So for sensible downstream analysis it would be important to keep track of the originating\nsamples. In particular, variant callers like ",(0,o.kt)("inlineCode",{parentName:"p"},"octopus")," require you to have read groups in the BAM\nfile."),(0,o.kt)("p",null,"The simplest way to put read groups into the BAM file is to have ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," put them in at the alignment\nstep.  For our experiment this can be done using the ",(0,o.kt)("inlineCode",{parentName:"p"},"-R")," option like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'bwa mem -R "@RG\\tID:ERR377582\\tSM:QG0033-C\\tPL:ILLUMINA" [other arguments]\n')),(0,o.kt)("p",null,"You can put other stuff into a read group (see below), but the run ID, the sample name, and the platform are all that we need just now."),(0,o.kt)("p",null,"Of course you have to be able to generate this for each sample.  With the layout described above, I wrote the following code (which I put in ",(0,o.kt)("inlineCode",{parentName:"p"},"pipelines/functions.snakemake"),") to do it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def find_sample_with_ID( ID ):\n    samples = config['samples']\n    sample = [ sample for sample in samples if sample['ID'] == ID ]\n    if  len( sample ) != 1:\n        raise Exception( \"Wrong number of samples found with ID '%s' (%d, expected 1).\" % ( ID, len( sample )) )\n    return sample[0]\n\ndef get_read_group_line( ID ):\n    sample = find_sample_with_ID( ID )\n    return \"@RG\\\\tID:{ID}\\\\tSM:{sample}\\\\tPL:ILLUMINA\".format(\n        ID = sample['ID'],\n        sample = sample['name']\n    )\n")),(0,o.kt)("p",null,"The alignment step can then be updated to use this function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'rule align_reads:\n  input:\n    fq1 = something,\n    fq2 = something\n  output:\n    sam = temp( "results/alignment/{ID}.sam" )\n  params:\n    read_group_spec = lambda wildcards: get_read_group_line( wildcards.ID )\n  shell: """\n    bwa mem -R {params.read_group_spec} ...\n  """\n')),(0,o.kt)("p",null,"If you look at the resulting files, they have an ",(0,o.kt)("inlineCode",{parentName:"p"},"@RG")," header record and ",(0,o.kt)("inlineCode",{parentName:"p"},"RG")," tags for each read - octopus will then accept these files."),(0,o.kt)("p",null,"What else can go in a read group? As the ",(0,o.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"GATK documentation\nindicates")," the read\ngroup can also contain information about the sequencing flowcell, lane, and sample barcode, and an\nidentifier for the library itself. Unfortunately some of this information can be hard to come by\ndepending on where your reads come from. As we describe below, some of it can be obtained from the\nread names in the fastq files. For the data in this practical, some parts such as the library\nidentifier can be found on the ",(0,o.kt)("a",{parentName:"p",href:"ERR377582"},"ENA website"),". But in general it's a bit hard to put it\nall together. (Luckily just the sample name and identifier are enough for our analysis.)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"whats-in-the-fastq-header"},"What's in the fastq header?"),(0,o.kt)("p",null,"If you look at the header / read name rows of a fastq file you'll see they actually contain a bunch\nof information - like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"@ERR377582.7615542 HS23_10792:2:2307:6524:31920#15/1\n")),(0,o.kt)("p",null,"This row tells us the sample ID (",(0,o.kt)("inlineCode",{parentName:"p"},"ERR377582"),") and the read identifier (",(0,o.kt)("inlineCode",{parentName:"p"},"7615542"),"). And this is\nfollowed by information identifying the instrument that generated the reads (",(0,o.kt)("inlineCode",{parentName:"p"},"HS23_10792"),"), the\nflowcell lane and tile number in the lane (",(0,o.kt)("inlineCode",{parentName:"p"},"2:2307"),"), the coordinates of the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.broadinstitute.org/files/shared/illuminavids/clusterGenSlides.pdf"},"cluster")," within the\ntile (",(0,o.kt)("inlineCode",{parentName:"p"},"6524"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"31920"),"), a number identifying the index of the sample within a multiplexed set of\nsamples (i.e. all run at the same time; ",(0,o.kt)("inlineCode",{parentName:"p"},"#15"),"), and whether it's read 1 or 2."),(0,o.kt)("p",null,"Some of this info can be put in the read group as well."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note.")," The format of this information is not standard across platforms, and it changes depending\non your data provider. Some other examples can be found ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FASTQ_format#Illumina_sequence_identifiers"},"on\nwikipedia")," or on the\n",(0,o.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"GATK read groups page"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"octopus-is-taking-too-long"},"Octopus is taking too long!"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luntergroup/octopus"},"Octopus variant caller")," can take a long time to do its work - hopefully reflecting that it is trying its best to make high-quality variant calls.  This might take too long to run on your laptop.  If so, here are some options for speeding it up:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you have a multi-core CPU, you can use more threads (",(0,o.kt)("inlineCode",{parentName:"p"},"--threads")," argument).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Restrict to a set of regions.  You can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"--regions")," option to tell Octopus to only work on specified regions.  For this tutorial, please include these regions: ",(0,o.kt)("inlineCode",{parentName:"p"},"--regions Pf3D7_02_v3:616190-656190 Pf3D7_02_v3:779288-859288 Pf3D7_11_v3:1023035-1081305"),".  (This brought the calling down to about half and hour when I tried it.)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You could also try the Octopus 'fast' or 'very fast' modes - though I haven't tried this."))),(0,o.kt)("p",null,"See ",(0,o.kt)("inlineCode",{parentName:"p"},"octopus --help")," for a full list of options."),(0,o.kt)("p",null,"(In general this might be less of a problem for real work as you might run it a compute cluster.)"),(0,o.kt)("p",null,"Another option is to try a different variant caller - ",(0,o.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us"},(0,o.kt)("inlineCode",{parentName:"a"},"GATK HaplotypeCaller")),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.nature.com/articles/nbt.4235"},(0,o.kt)("inlineCode",{parentName:"a"},"DeepVariant"))," or ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/freebayes/freebayes"},(0,o.kt)("inlineCode",{parentName:"a"},"freebayes"))," might be possibilities.  For a simple approach you could also use ",(0,o.kt)("a",{parentName:"p",href:"https://samtools.github.io/bcftools/bcftools.html"},(0,o.kt)("inlineCode",{parentName:"a"},"bcftools mpileup")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"bcftools call"))," (this is likely to be substantially faster as it relies on the input alignments does not try to reconstruct local haplotypes near each variant.)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"what-ploidy"},"What ploidy?"),(0,o.kt)("p",null,"Blood-stage malaria parasites are ",(0,o.kt)("a",{parentName:"p",href:"https://www.cdc.gov/malaria/about/biology/index.html"},"haploid"),".  So set octopus ",(0,o.kt)("inlineCode",{parentName:"p"},"--organism-ploidy 1"),"."),(0,o.kt)("p",null,"On the other hand, ",(0,o.kt)("a",{parentName:"p",href:"https://doi.org/10.7554/eLife.40845.001"},"mixed infections are common"),", and to handle this most projects actually treat samples as if they were diploid - they then treat heterozygote calls as 'mixed' calls.  This is ",(0,o.kt)("em",{parentName:"p"},"ad hoc")," but works ok.  So you could set ",(0,o.kt)("inlineCode",{parentName:"p"},"--organism-ploidy 2"),"."),(0,o.kt)("p",null,"For the purposes of this tutorial you could do either - or both so we can see the difference?"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the tips and tricks"),"."),(0,o.kt)("h4",{id:"tools-that-use-temporary-directories"},"Tools that use temporary directories"),(0,o.kt)("p",null,"Some tools have that bad habit of leaving 'stuff' in the directory you run them in. This is really\nannoying for pipelines because you don't want that - you want to put the temp stuff away somewhere\nout of the way. ",(0,o.kt)("inlineCode",{parentName:"p"},"octopus")," is one of these tools: if you run it you'll see it outputs a directory\ncalled ",(0,o.kt)("inlineCode",{parentName:"p"},"octopus-temp"),"."),(0,o.kt)("p",null,"Really the only way to deal with this is use the program help to find the option that renames the\ntemp dir - then send it somewhere different. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"octopus [other options] --temp-directory-prefix results/variants/tmp/octopus/\n")),(0,o.kt)("p",null,"This will probably work here. (In general you may need to use snakemake wildcards etc. to name this temp directory so it doesn't clash if the same rule runs multiple jobs in parallel.)s"),(0,o.kt)("h4",{id:"tips-on-using-bwa-mem"},"Tips on using ",(0,o.kt)("inlineCode",{parentName:"h4"},"bwa mem")),(0,o.kt)("p",null,"Here are a few options you can use to ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa mem")," which you might want to consider using."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa mem")," for a list of options.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The basic usage is ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa mem -o output.sam [path to indexed fasta file] read1.fq.gz read2.fq.gz"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"-t")," option tells ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," to use more than one thread.  (If doing this, make sure to also ",(0,o.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#threads"},"tell snakemake the number of threads it will use"),".)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"-R")," option specifies that ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," should include a read group header line and read groups tags in the output - this is ",(0,o.kt)("a",{parentName:"p",href:"#read-groups-what-now"},"described above"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," will output only the best alignment for each read.  However, if you specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"-a")," option then ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa")," will output multiple possible alignments for each read, but all except one will be marked as 'not a primary alignment' (using the ",(0,o.kt)("a",{parentName:"p",href:"https://broadinstitute.github.io/picard/explain-flags.html"},(0,o.kt)("inlineCode",{parentName:"a"},"SAM flags")),").  This can be useful in cases when you want to consider possible alternate alignments."))),(0,o.kt)("p",null,"There are also other aligners out there. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lh3/minimap2"},(0,o.kt)("inlineCode",{parentName:"a"},"minimap2"))," is another\ngood choice. Nevertheless the field typically currently uses ",(0,o.kt)("inlineCode",{parentName:"p"},"bwa mem")," for Illumina short-read NGS\ndata."),(0,o.kt)("h4",{id:"tips-on-using-samtools"},"Tips on using ",(0,o.kt)("inlineCode",{parentName:"h4"},"samtools")),(0,o.kt)("p",null,"Here are some tips on using ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools")," for a list of commands, and ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools [command]")," for a list of options for each command.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Some commands, like ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools markdup"),", take the output filename as a seperate argument.  But others, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools view")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools sort"),", want you to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-o")," option to specify the output file (otherwise they output to standard output).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"multiqc")," can read ",(0,o.kt)("inlineCode",{parentName:"p"},"samtools stats")," output, useful for post-alignment QC."))),(0,o.kt)("h2",{id:"good-luck"},"Good luck!"))}h.isMDXComponent=!0},5671:function(e,t,n){t.Z=n.p+"assets/files/pipeline-f7b1538da80891cc35465d36fdd41f64.svg"},1036:function(e,t,n){t.Z=n.p+"assets/images/pipeline-f7b1538da80891cc35465d36fdd41f64.svg"}}]);