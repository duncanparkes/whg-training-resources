"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8111],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8643:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={},s="What is the command-line interface?",p={unversionedId:"programming/introduction_to_command_line/command_line_intro",id:"programming/introduction_to_command_line/command_line_intro",title:"What is the command-line interface?",description:"The command-line interface (sometimes also called \u201ccommand prompt\u201d or \u201cterminal\u201d) is a way of",source:"@site/docs/programming/introduction_to_command_line/command_line_intro.md",sourceDirName:"programming/introduction_to_command_line",slug:"/programming/introduction_to_command_line/command_line_intro",permalink:"/whg-training-resources/programming/introduction_to_command_line/command_line_intro",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/docs/programming/introduction_to_command_line/command_line_intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction to the Command Line",permalink:"/whg-training-resources/programming/introduction_to_command_line/"},next:{title:"Programming with gene annotations",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/"}},m={},d=[{value:"Standard Output",id:"standard-output",level:2},{value:"Standard Input",id:"standard-input",level:2},{value:"Pipelines",id:"pipelines",level:2}],u={toc:d};function c(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"what-is-the-command-line-interface"},"What is the command-line interface?"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"command-line")," interface (sometimes also called \u201c",(0,i.kt)("strong",{parentName:"p"},"command prompt"),"\u201d or \u201c",(0,i.kt)("strong",{parentName:"p"},"terminal"),"\u201d) is a way of\ninteracting with the computer using only the keyboard.\nMany of the programs and tools used in bioinformatics are designed to work only from command-line, so\nit\u2019s very important to get familiar with how the terminal works."),(0,i.kt)("p",null,"Although there are different types of terminals, all of them have an interface (called \u201c",(0,i.kt)("strong",{parentName:"p"},"shell"),"\u201d) translating\nthe text you type into meaningful commands that the computer can understand."),(0,i.kt)("p",null,"Today we\u2019ll focus on the most commonly used shell, ",(0,i.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/bash/"},"BASH"),"\n(developed in 1989!), which is the default one for most Linux and\nMacOS systems. It can also work on Windows, but you have to\nmanually install it."),(0,i.kt)("h1",{id:"why-should-we-learn-to-use-the-command-line"},"Why should we learn to use the command line?"),(0,i.kt)("p",null,"Here\u2019s some reasons:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It\u2019s usually faster than using a GUI (Graphic User Interface)"),(0,i.kt)("li",{parentName:"ul"},"You can combine multiple programs, making the output of one the input of the next"),(0,i.kt)("li",{parentName:"ul"},"Most bioinformatics tools are made for command-line users"),(0,i.kt)("li",{parentName:"ul"},"It can efficiently handle big files that gui based tools might struggle to open"),(0,i.kt)("li",{parentName:"ul"},"The command line has lots of powerful commands for parsing text files"),(0,i.kt)("li",{parentName:"ul"},"High-performance computing: the cluster doesn\u2019t\nhave a GUI!"),(0,i.kt)("li",{parentName:"ul"},"Some binary files (e.g. BAM or CRAM) can only be\nhandled with dedicated command-line software (i.e.\nsamtools)"),(0,i.kt)("li",{parentName:"ul"},"Some comma- or tab-separated files can be\nmisinterpreted by tools like Excel (i.e. genes that look\nlike dates are automatically converted to dates by\nExcel, or comma/dot usage for decimal positions)")),(0,i.kt)("h1",{id:"first-commands"},"First Commands"),(0,i.kt)("p",null,"When you first open a terminal, you might want to find out a bit about where you are."),(0,i.kt)("p",null,"You can find out what your username is with ",(0,i.kt)("inlineCode",{parentName:"p"},"whoami")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ whoami\n\nduncan\n")),(0,i.kt)("p",null,"the hostname of the computer you're using with ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ hostname\n\nduncans-laptop\n")),(0,i.kt)("p",null,"the directory you're currently in with ",(0,i.kt)("inlineCode",{parentName:"p"},"pwd")," (print working directory)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ pwd\n\n/home/duncan\n")),(0,i.kt)("p",null,"what files are there in the directory you're in"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ls\n$\n")),(0,i.kt)("p",null,"Nothing much at the moment! Let's make a few files so we have a more realistic home directory."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ touch bash_intro1.md  bash_intro_2012.md  bash_intro2.md  bash_introduction.doc  bash_intro.md  bash_intro.md.old .very_secret")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"touch")," has just created empty files for any which did not previously exist."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ls\nbash_intro1.md      bash_intro2.md         bash_intro.md\nbash_intro_2012.md  bash_introduction.doc  bash_intro.md.old\n")),(0,i.kt)("p",null,"and what you've been up to recently with ",(0,i.kt)("inlineCode",{parentName:"p"},"history")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ history\n 1 whoami\n 2 hostname\n 3 pwd\n 4 ls\n 5 touch bash_intro1.md  bash_intro_2012.md  bash_intro2.md  bash_introduction.doc  bash_intro.md  bash_intro.md.old .very_secret\n 6 ls\n 7 history\n")),(0,i.kt)("h1",{id:"help-me"},"Help me!"),(0,i.kt)("p",null,"BASH has hundreds of commands, but don\u2019t panic!\nIn most of the cases, you\u2019ll only use a handful of them in your day-to-day work."),(0,i.kt)("p",null,"If you\u2019re unsure about a specific command\u2019s\nsyntax, you can type ",(0,i.kt)("inlineCode",{parentName:"p"},"man")," followed by the command. For example, "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ man ls")),(0,i.kt)("p",null,"produces the following output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"LS(1)                            User Commands                           LS(1)\n\nNAME\n       ls - list directory contents\n\nSYNOPSIS\n       ls [OPTION]... [FILE]...\n\nDESCRIPTION\n       List  information  about  the FILEs (the current directory by default).\n       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci\u2010\n       fied.\n\n       Mandatory  arguments  to  long  options are mandatory for short options\n       too.\n\n       -a, --all\n              do not ignore entries starting with .\n\n       -A, --almost-all\n              do not list implied . and ..\n\n       --author\n Manual page ls(1) line 1 (press h for help or q to quit)\n")),(0,i.kt)("p",null,"(use the arrows on your keyboard to scroll up and down the\nmanual; then press q to exit when you\u2019re done)"),(0,i.kt)("p",null,"Alternatively, you can try tying the command name followed by ",(0,i.kt)("inlineCode",{parentName:"p"},"--help"),", for example"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ ls --help")),(0,i.kt)("p",null,"or "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ ls -h")),(0,i.kt)("p",null,"for short."),(0,i.kt)("h1",{id:"standard-command-syntax"},"Standard command syntax"),(0,i.kt)("p",null,"Most commands follow the same basic syntax as ",(0,i.kt)("inlineCode",{parentName:"p"},"ls"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls -lahR my_folder")),(0,i.kt)("p",null,"This has three parts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the command name (",(0,i.kt)("inlineCode",{parentName:"li"},"ls"),")"),(0,i.kt)("li",{parentName:"ul"},"some options (",(0,i.kt)("inlineCode",{parentName:"li"},"-lahR"),"), which change how the command behaves"),(0,i.kt)("li",{parentName:"ul"},"and some positional arguments (",(0,i.kt)("inlineCode",{parentName:"li"},"my_folder"),"), which are what the command operates on.")),(0,i.kt)("p",null,"The options here are actually ",(0,i.kt)("inlineCode",{parentName:"p"},"-l"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-h"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"-R"),", but they can be combined together as ",(0,i.kt)("inlineCode",{parentName:"p"},"-lahR"),". Some options have longer names starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"--"),", for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"-h")," is short for ",(0,i.kt)("inlineCode",{parentName:"p"},"--human-readable"),". The longer names can't be combined in the same way."),(0,i.kt)("p",null,"The positional arguments, if there are more than one, are separated by spaces."),(0,i.kt)("p",null,"We could have written the command above as"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls -la -R --human-readable my_folder")),(0,i.kt)("h1",{id:"directories-also-known-as-folders"},"Directories (also known as folders)"),(0,i.kt)("p",null,"Let's make a new folder and tidy away some of those files."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ mkdir archive")),(0,i.kt)("p",null,"(",(0,i.kt)("inlineCode",{parentName:"p"},"mkdir"),' stands for "make directory")'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ls\narchive         bash_intro_2012.md  bash_introduction.doc  bash_intro.md.old\nbash_intro1.md  bash_intro2.md      bash_intro.md\n")),(0,i.kt)("p",null,"You'll notice that the new directory has been made in the current working directory. We can change our working directory with ",(0,i.kt)("inlineCode",{parentName:"p"},"cd"),' ("change directory").'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cd archive\n$ pwd\n/home/duncan/archive\n")),(0,i.kt)("p",null,"You can also change to a directory by giving ",(0,i.kt)("inlineCode",{parentName:"p"},"cd"),' the whole "path".'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ cd /home/duncan/archive")),(0,i.kt)("p",null,"If you want to get back to the directory above the one you're currently in, ",(0,i.kt)("inlineCode",{parentName:"p"},"..")," refers to the parent of the current directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ pwd\n/home/duncan/archive\n$ cd ..\n$ pwd\n/home/duncan\n")),(0,i.kt)("p",null,"Another useful shortcut is ",(0,i.kt)("inlineCode",{parentName:"p"},"~"),", which refers to your home directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cd ~\n$ pwd\n/home/duncan\n")),(0,i.kt)("h1",{id:"moving-and-copying-files"},"Moving and Copying Files"),(0,i.kt)("p",null,"It's time to hide away some of those old versions in the archive."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ mv bash_intro.md.old bash_introduction.doc archive/\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mv"),' stands for "move", and allows you to move files from one place to another. In the form above it takes the files represented by all positional arguments except the last one and puts them in the directory which is its final argument.'),(0,i.kt)("p",null,"It can also be used to rename a file."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ mv bash_intro_2012.md bash_intro_oldest.md")),(0,i.kt)("p",null,"It even works on directories"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ mv archive old")),(0,i.kt)("p",null,"Copying files is similar to moving them, but uses the command ",(0,i.kt)("inlineCode",{parentName:"p"},"cp"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ cp bash_intro.md bash_intro_final.md")),(0,i.kt)("h1",{id:"removing-files-or-folders-rm-rmdir"},"Removing files or folders: ",(0,i.kt)("inlineCode",{parentName:"h1"},"rm"),", ",(0,i.kt)("inlineCode",{parentName:"h1"},"rmdir")),(0,i.kt)("p",null,"To remove files you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"rm")," command."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ rm bash_intro2.md")),(0,i.kt)("p",null,"If you want to remove a directory, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"rmdir"),", but this only works if the directory is empty."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ rmdir old\nrmdir: failed to remove 'old': Directory not empty\n")),(0,i.kt)("p",null,"If you want to remove a folder and its contents, you can pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"-r")," argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"rm"),',\nwhich tells it to remove the directory "recursively".'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ rm -r old")),(0,i.kt)("p",null,"To remove multiple files, for example all those ending with \u201c.png\u201d, you can use\nthe wildcard ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"rm my_folder/*.png"),".\nBut be ",(0,i.kt)("em",{parentName:"p"},"CAREFUL"),": the command ",(0,i.kt)("inlineCode",{parentName:"p"},"rm *")," will delete everything in your current folder."),(0,i.kt)("p",null,"IMPORTANT: when you delete\nsomething with ",(0,i.kt)("inlineCode",{parentName:"p"},"rm"),", it\u2019s gone (it\ndoesn\u2019t ask for confirmation)!"),(0,i.kt)("p",null,"TRICK: first try the same command\nbut with ",(0,i.kt)("inlineCode",{parentName:"p"},"ls")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"rm")," to check you have the right files."),(0,i.kt)("h1",{id:"some-important-facts-about-file-names"},"Some important facts about file names..."),(0,i.kt)("p",null,"It is worth remembering that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"File names in Linux are case sensitive: the names \u201cFile.txt\u201d and \u201cfile.txt\u201d refer to different files"),(0,i.kt)("li",{parentName:"ul"},"File names beginning with a period (\u201c.\u201d) character are hidden, so if you type ",(0,i.kt)("inlineCode",{parentName:"li"},"ls")," you won\u2019t see them\nunless you also use the option ",(0,i.kt)("inlineCode",{parentName:"li"},"-a"),". Some applications usually place their configuration/settings files in\nyour home directory as hidden files."),(0,i.kt)("li",{parentName:"ul"},"Although Linux supports file names containing white spaces and punctuation characters, please limit\nthe characters you use to period (\u201c.\u201d), dash (\u201c-\u201d), and underscore (\u201c_\u201d) and try to avoid using spaces.\nYou will thank yourself later for this!"),(0,i.kt)("li",{parentName:"ul"},"Please avoid using bash commands as filenames: although possible, this might mess up your\ncommands!")),(0,i.kt)("h1",{id:"creating-files"},"Creating files"),(0,i.kt)("p",null,"A simple way to create an empty file is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"touch")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ touch new_file.txt")),(0,i.kt)("p",null,"If you want to write a text file, there are lots of possible editors you can use. A good one to start off with is ",(0,i.kt)("inlineCode",{parentName:"p"},"nano"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ nano notes.txt")),(0,i.kt)("h1",{id:"dowloading-files"},"Dowloading files"),(0,i.kt)("p",null,"Let's get a file to play with. You can download from a url using ",(0,i.kt)("inlineCode",{parentName:"p"},"wget"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"curl"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ wget https://www.well.ox.ac.uk/~duncan/sonnet.txt")),(0,i.kt)("p",null,"or"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ curl https://www.well.ox.ac.uk/~duncan/sonnet.txt -o sonnet.txt")),(0,i.kt)("h1",{id:"viewing-the-content-of-a-file-cat-less-head-tail"},"Viewing the content of a file: ",(0,i.kt)("inlineCode",{parentName:"h1"},"cat"),", ",(0,i.kt)("inlineCode",{parentName:"h1"},"less"),", ",(0,i.kt)("inlineCode",{parentName:"h1"},"head"),", ",(0,i.kt)("inlineCode",{parentName:"h1"},"tail")),(0,i.kt)("p",null,"Obviously you can view the content of a file with an editor like ",(0,i.kt)("inlineCode",{parentName:"p"},"nano"),", but then you're losing\nsome of the advantages of being on the command line."),(0,i.kt)("p",null,"The simplest way to see the contents of a file is with ",(0,i.kt)("inlineCode",{parentName:"p"},"cat"),", which just prints the contents of the\nfile to the screen and then returns you to the command prompt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat sonnet.txt \nShall I compare thee to a summer's day?\n  Thou art more lovely and more temperate:\n  Rough winds do shake the darling buds of May,\n  And summer's lease hath all too short a date:\n  Sometime too hot the eye of heaven shines,\n  And often is his gold complexion dimm'd,\n  And every fair from fair sometime declines,\n  By chance, or nature's changing course untrimm'd:\n  But thy eternal summer shall not fade,\n  Nor lose possession of that fair thou ow'st,\n  Nor shall death brag thou wander'st in his shade,\n  When in eternal lines to time thou grow'st,\n    So long as men can breathe, or eyes can see,\n    So long lives this, and this gives life to thee.\n\n")),(0,i.kt)("p",null,"If the file you looked at was long, the start of it has probably disappeared off the top of the screen.\nIf you just want to see the start of the file, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," (the ",(0,i.kt)("inlineCode",{parentName:"p"},"-3")," below is how many lines to take)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ head -3 sonnet.txt \nShall I compare thee to a summer's day?\n  Thou art more lovely and more temperate:\n  Rough winds do shake the darling buds of May,\n")),(0,i.kt)("p",null,"Similarly, you can see the last few lines of the file with ",(0,i.kt)("inlineCode",{parentName:"p"},"tail"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail -1 sonnet.txt \n    So long lives this, and this gives life to thee.\n")),(0,i.kt)("p",null,"If the file you're interested in is still getting new stuff added to its end, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"tail -f"),"\nto follow new content at the end of the file."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ tail -f log.txt")),(0,i.kt)("p",null,"You'll neet to type CTRL-c to stop tailing the file."),(0,i.kt)("p",null,"If you want to be able to move around inside a file you're looking at, a good choice would be to use ",(0,i.kt)("inlineCode",{parentName:"p"},"less"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ less sonnet.txt")),(0,i.kt)("p",null,"You can then move around with the cursor keys and PageUp and PageDown. Press ",(0,i.kt)("inlineCode",{parentName:"p"},"q")," to return to the command line."),(0,i.kt)("p",null,"This looks very similar to when you typed ",(0,i.kt)("inlineCode",{parentName:"p"},"man ls"),", doesn't it? That's because ",(0,i.kt)("inlineCode",{parentName:"p"},"man")," is using ",(0,i.kt)("inlineCode",{parentName:"p"},"less")," to show\nyou the manual page. Lots of command line tools use other tools to do part of their work.\nBeing able to combine things like this is what makes the command line great."),(0,i.kt)("p",null,"Why is it called ",(0,i.kt)("inlineCode",{parentName:"p"},"less"),"? It's an improved version of an earlier command called ",(0,i.kt)("inlineCode",{parentName:"p"},"more"),", and less is more."),(0,i.kt)("h1",{id:"getting-information-about-a-file"},"Getting information about a file"),(0,i.kt)("p",null,"If you want a word or line count of a file, ",(0,i.kt)("inlineCode",{parentName:"p"},"wc")," will tell you the number of lines, words and characters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ wc notes.txt")),(0,i.kt)("p",null,"Often we want to know just the number of lines"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ wc -l notes.txt")),(0,i.kt)("h1",{id:"io-redirection-and-piping"},"I/O redirection and piping"),(0,i.kt)("p",null,"In programming there are three standard streams of communication"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"standard input (stdin)"),(0,i.kt)("li",{parentName:"ul"},"standard output (stdout)"),(0,i.kt)("li",{parentName:"ul"},"standard error (stderr)")),(0,i.kt)("p",null,"Stdin is what goes into a command, stdout is what comes out of it, and stderr is somewhere for the command to write messages about how things are going (such as error messages)."),(0,i.kt)("h2",{id:"standard-output"},"Standard Output"),(0,i.kt)("p",null,"By default, stdout from a command is sent to the terminal, and that's what you're seeing when you type ",(0,i.kt)("inlineCode",{parentName:"p"},"ls"),", etc."),(0,i.kt)("p",null,"However, sometimes you might need instead to\nhave this output written to a file."),(0,i.kt)("p",null,"If you follow a command with ",(0,i.kt)("inlineCode",{parentName:"p"},">")," and the name of a file, then stdout will go there instead, so"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$ ls > myfiles.txt")),(0,i.kt)("p",null,"will send no output to the terminal, but instead creates a file ",(0,i.kt)("inlineCode",{parentName:"p"},"myfiles.txt"),". Be ",(0,i.kt)("em",{parentName:"p"},"CAREFUL"),", this will always\nmake a new file. If there was already a file with the name name it will be overwritten and the previous contents\nwill be lost."),(0,i.kt)("p",null,'We say that the output has been "redirected" to the file.'),(0,i.kt)("p",null,"If you use ",(0,i.kt)("inlineCode",{parentName:"p"},">>")," instead, then the output will be appended to the file rather than overwriting it. This is useful for things like log files."),(0,i.kt)("h2",{id:"standard-input"},"Standard Input"),(0,i.kt)("p",null,"Many commands can accept input from stdin. A good example is ",(0,i.kt)("inlineCode",{parentName:"p"},"wc"),": if it's not given a filename, ",(0,i.kt)("inlineCode",{parentName:"p"},"wc")," will work on stdin instead. So for example, we can redirect a file to ",(0,i.kt)("inlineCode",{parentName:"p"},"wc"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ wc -l < myfiles.txt\n6\n")),(0,i.kt)("p",null,"A command can have both its input and output redirected"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ wc -l < myfiles.txt > filecount.txt\n$ cat filecount.txt\n6\n")),(0,i.kt)("h2",{id:"pipelines"},"Pipelines"),(0,i.kt)("p",null,"Using standard input and standard output is not just another way to read from files and write to files:\nyou can also connect commands together in chains, sending stdout from one command to stdin of another.\nWe use the pipe symbol for this ",(0,i.kt)("inlineCode",{parentName:"p"},"|"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ls | wc -l\n6\n")),(0,i.kt)("p",null,"Here we list the files in the current directory, and pipe the output of this to ",(0,i.kt)("inlineCode",{parentName:"p"},"wc")," to count the number of lines. (Notice that ls has realised it's in a pipeline and written the filenames one per line)."),(0,i.kt)("p",null,"This technique of piping one command to another is probably one of the most powerfull things in bash."),(0,i.kt)("p",null,"What if you want to send your output to standard out and keep a copy in a file as well? You need ",(0,i.kt)("inlineCode",{parentName:"p"},"tee"),": this takes input on standard in, echoes it to standard out, but sends a copy to a file as well. You can imagine a letter T with standard input coming from the left, standard output going to the right, and a copy being dropped in a file at the bottom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ echo hello | tee hello.txt\nhello\n$ cat hello.txt\nhello\n")),(0,i.kt)("h1",{id:"some-filters-sort-uniq-cut-tr"},"Some filters: sort, uniq, cut, tr"),(0,i.kt)("p",null,"Bash contains lots of commands which can take standard input, transform it, and then send the result to standard output."),(0,i.kt)("p",null,"Let's imagine we have the following file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv \nJohn    vocals,guitars,keyboards,harmonica,bass\nPaul    vocals,bass,guitars,keyboards,drums\nGeorge  guitars,vocals,sitar,keyboards,bass\nRingo   drums,percussion,vocals\n")),(0,i.kt)("p",null,"You can get a copy for yourself and play along:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"wget https://www.well.ox.ac.uk/~duncan/beatles.tsv")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sort")," sorts its input alphabetically, numerically, or even randomly")),(0,i.kt)("p",null,"Let's sort the Beatles based on their first names (from column 1)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sort -k 1 < beatles.tsv \nGeorge  guitars,vocals,sitar,keyboards,bass\nJohn    vocals,guitars,keyboards,harmonica,bass\nPaul    vocals,bass,guitars,keyboards,drums\nRingo   drums,percussion,vocals\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cut")," lets you pick particular columns of the input to keep")),(0,i.kt)("p",null,"If we only want the names above, then we could use cut to pick out just the first column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cut -f 1 < beatles.tsv\nJohn\nPaul\nGeorge\nRingo\n")),(0,i.kt)("p",null,'By default, cut bases its columns on tabs, but it can use anything you like. Let\'s get just the first instrument from that list by using cut again\nwith the "delimiter" set to a comma.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv | cut -f 2 | cut -d ',' -f 1\nvocals\nvocals\nguitars\ndrums\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uniq")," removes duplicate lines from standard input (remember to sort it first!)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv | cut -f 2 | cut -d ',' -f 1 | uniq\nvocals\nguitars\ndrums\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tr")," translates characters into others")),(0,i.kt)("p",null,"If you give it two equal length strings, it will swap characters in the first string in standard input for the corresponding characters from the second string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ echo veryinsecurepassword | tr osi 05!\nvery!n5ecurepa55w0rd\n")),(0,i.kt)("p",null,"It can also be used to change the case of a string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ echo HELLO | tr [:upper:] [:lower:]\nhello\n")),(0,i.kt)("p",null,"As you can see, you can do a lot by combining simple tools together with pipes."),(0,i.kt)("h1",{id:"grep-awk-and-sed"},"Grep, Awk and Sed"),(0,i.kt)("p",null,"Grep, Awk, and sed are all sophisticated tools in their own right, which would be well worth looking into in detail. However there are a few recipies that you can use with each of them without needing to understand them deeply."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"grep")," extracts lines containing a pattern")),(0,i.kt)("p",null,"You could use it to see who in the Beatles plays  keyboards"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv | grep keyboards\nJohn    vocals,guitars,keyboards,harmonica,bass\nPaul    vocals,bass,guitars,keyboards,drums\nGeorge  guitars,vocals,sitar,keyboards,bass\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"awk")," filter lines based on the contents of a column")),(0,i.kt)("p",null,"Let's pick out just Paul using his name in column one"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv | awk '$1==\"Paul\"'\nPaul    vocals,bass,guitars,keyboards,drums\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sed")," can parse and transform text in a more sophisticated way than ",(0,i.kt)("inlineCode",{parentName:"li"},"tr"))),(0,i.kt)("p",null,"For example, it can be used to substitute some text with other text"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cat beatles.tsv | sed 's/keyboards/piano/'\nJohn    vocals,guitars,piano,harmonica,bass\nPaul    vocals,bass,guitars,piano,drums\nGeorge  guitars,vocals,sitar,piano,bass\nRingo   drums,percussion,vocals\n")),(0,i.kt)("h1",{id:"exercises"},"Exercises"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get the file ",(0,i.kt)("a",{parentName:"li",href:"https://www.well.ox.ac.uk/~duncan/dna.txt"},"https://www.well.ox.ac.uk/~duncan/dna.txt")," of simulated DNA strings (you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"wget")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"curl"),")"),(0,i.kt)("li",{parentName:"ol"},"How many lines contain the sequence CGAT (we call a string we're looking for in DNA a motif)."),(0,i.kt)("li",{parentName:"ol"},"What line numbers contain this sequence?"),(0,i.kt)("li",{parentName:"ol"},"Can you reverse complement the sequences line by line? (have a look at ",(0,i.kt)("inlineCode",{parentName:"li"},"man rev"),")"),(0,i.kt)("li",{parentName:"ol"},"How many lines in the complement contain the motif CGAT?")))}c.isMDXComponent=!0}}]);